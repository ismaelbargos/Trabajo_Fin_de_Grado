var express = require('express');
var User = require("../models/user")
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var FacebookStrategy = require('passport-facebook').Strategy;
var TwitterStrategy  = require('passport-twitter').Strategy;
var router = express.Router();
var async = require('async');
var crypto = require('crypto');
var nodemailer = require('nodemailer');
var transporter = nodemailer.createTransport({
        service: 'Gmail',
        auth: {
            user: 'urjc.api.emt@gmail.com', // Your email id
            pass: 'TFG2016Ibp' // Your password
        }
});


//var sendgrid = require('sendgrid').SendGrid("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");
var bcrypt = require('bcryptjs');


var configAuth={
	'facebookAuth': {
		'clientID'      : '678132995659325', // your App ID
        'clientSecret'  : 'c663c5e7c691a8b4d3d0a42137dbcb9a', // your App Secret
        'callbackURL'   : 'http://localhost:3000/users/auth/facebook/callback'
	},

	'twitterAuth': {
		'consumerKey'      : 'h5UgrKQQhkryAavawbWE9iz0r', // your App ID
        'consumerSecret'  : 'SQHwtmMId6yYGR1QSuTBKq3SNiOqqfIfhEqJqemkCcmZHxPzvF', // your App Secret
        'callbackURL'   : 'http://localhost:3000/users/auth/twitter/callback'
	}
}

/* GET home page. */


passport.use(new FacebookStrategy({

        // pull in our app id and secret from our auth.js file
        clientID        : configAuth.facebookAuth.clientID,
        clientSecret    : configAuth.facebookAuth.clientSecret,
        callbackURL     : configAuth.facebookAuth.callbackURL

    },

    // facebook will send back the token and profile
    function(token, refreshToken, profile, done) {

        // asynchronous
        process.nextTick(function() {

            // find the user in the database based on their facebook id
            User.findOne({ 'facebook.id' : profile.id }, function(err, user) {
                // if there is an error, stop everything and return that
                // ie an error connecting to the database
                if (err)
                    return done(err);

                // if the user is found, then log them in
                if (user) {
                    return done(null, user); // user found, return that user
                } else {
                    // if there is no user found with that facebook id, create them
                    var newUser            = new User();
					console.log(profile);
                    // set all of the facebook information in our user model
					newUser.local.username = profile.displayName;
                    newUser.facebook.id    = profile.id; // set the users facebook id                   
                    newUser.facebook.token = token; // we will save the token that facebook provides to the user                
                    newUser.facebook.name  = profile.displayName; // look at the passport user profile to see how names are returned

                    // save our user to the database
                    User.createFacebookUser(newUser,function(err, user){
				  		if (err){
				  			return res.render('error', {message: "Error al guardar el usuario en base de datos."});
				  		}
				  	})
                }

            });
        });

    })
);

passport.use(new TwitterStrategy({

        consumerKey     : configAuth.twitterAuth.consumerKey,
        consumerSecret  : configAuth.twitterAuth.consumerSecret,
        callbackURL     : configAuth.twitterAuth.callbackURL

    },
    function(token, tokenSecret, profile, done) {

        // make the code asynchronous
    // User.findOne won't fire until we have all our data back from Twitter
        process.nextTick(function() {

            User.findOne({ 'twitter.id' : profile.id }, function(err, user) {

                // if there is an error, stop everything and return that
                // ie an error connecting to the database
                if (err)
                    return done(err);

                // if the user is found then log them in
                if (user) {
                    return done(null, user); // user found, return that user
                } else {
                    // if there is no user, create them
                    var newUser                 = new User();
                    // set all of the user data that we need
                    newUser.local.username = profile.username;
                    newUser.twitter.id          = profile.id;
                    newUser.twitter.token       = token;
                    newUser.twitter.username    = profile.username;
                    newUser.twitter.displayName = profile.displayName;

                    // save our user into the database
                    User.createTwitterUser(newUser,function(err,user){
                    	if (err){
                    		return res.render('error', {message: "Error al guardar el usuario en base de datos."});
                    	}
                    })
                }
            });
    	});
    })
);

passport.use(new LocalStrategy(
  function(username, password, done) {
    User.getUserByUsername(username, function(err, user){
    	if (err) throw err;
    	if (!user){
    		return done(null, false, {message:'Usuario desconocido'});
    	}
    	User.comparePassword(password,user.local.password,function(err,isMatch){
    		if (err) throw err;
    		if(isMatch){
    			return done(null,user);
    		}else{
    			return done(null, false, {message:'Contraseña incorrecta'})
    		}
    	})
    });
  }
));

passport.serializeUser(function(user, done) {
  done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  User.getUserById(id, function(err, user) {
    done(err, user);
  });
});

router.get('/register', function(req, res) {
  res.render('register');
});

router.get('/login', function(req, res) {
	
  res.render('login',{message: req.flash('error')});
});

router.get('/logout',function(req,res){
	req.logout();
	res.redirect('/');
})

router.post('/login', passport.authenticate('local',
{successRedirect:'/Experimental',
failureRedirect:'/users/login',
failureFlash:true}),
function(req, res){
	res.redirect('/');
});

router.post('/register', function(req,res){
  var username = req.body.username;
  var password = req.body.password;
  var email = req.body.email;
  var password2 = req.body.password2;
  req.checkBody('username', 'Username is required').notEmpty();
  req.checkBody('email', 'Email is required').notEmpty();
  req.checkBody('password', 'Password is required').notEmpty();
  req.checkBody('password2', 'Passwords do not match').equals(req.body.password);

  var errors = req.validationErrors();
  if(errors){
  	  var message = [];
  	  for (i=0;i<errors.length;i++){
  	  	message.push(errors[i].msg);
   	  }
  	res.render('register',{message: message});
  }else{
  	User.getUserByUsername(username, function(err, user){
  		if (user){
            return res.render('register',{message: "Lo sentimos. El usuario introducido ya existe. Vuelva a intentarlo."});
  		}else{
  			User.getUserByEmail(email,function(err,user){
  				if (user){
            		return res.render('register', {message: "Lo sentimos. El email introducido ya existe. Vuelva a intentarlo."});
  				}
  				else{
  					console.log("usuario a guardar");
  					var newUser = new User();
				  	newUser.local.username = username;
				  	newUser.local.email = email;
				  	newUser.local.password= password;
  					User.createUser(newUser,function(err,user){
  						if (err){
  							return res.render('register', {message: "Existe un problema en base de datos. Vuelve a intentarlo."});
  						}else{
							res.render('login', {success_msg: "Ya estas registrado, por favor, inicia sesion"});
  						}
  					})
  				}
  			})
  		}
  	}) 
  }
});

router.get('/forgot', function(req, res) {
  res.render('forgot', {
    user: req.user
  });
});

router.post('/forgot', function(req, res, next) {
  async.waterfall([
    function(done) {
      crypto.randomBytes(20, function(err, buf) {
        var token = buf.toString('hex');
        done(err, token);
      });
    },
    function(token, done) {
      User.findOne({ 'local.email': req.body.email }, function(err, user) {
        if (!user) {
          req.flash('error', 'No existe una cuenta de usuario con este e-mail.');
          return res.redirect('/users/forgot');
        }

        user.local.resetPasswordToken = token;
        user.local.resetPasswordExpires = Date.now() + 3600000; // 1 hour

        user.save(function(err) {
          done(err, token, user);
        });
      });
    },
    function(token, user, done) {
      /*var helper = require('sendgrid').mail;
	  from_email = new helper.Email("URJC.API.EMT@gmail.com");
	  console.log(req.body.email);
	  to_email = new helper.Email(req.body.email);
	  subject = "Recordar password";
	  content = new helper.Content("text/plain", "Estas recibiendo este correo porque alguien ha solicitado el reset de tu contraseña.\n\n" +
          "Por favor,accede a la siguiente dirección antes de 1 hora para cambiar tu contraseña.\n\n" +
          "http://" + req.headers.host + "/users/reset/" + token + "\n\n" +
          "Si no has sido tú, el solicitante de esta petición, no hagas caso a este email y tu contraseña se mantendrá.\n");
	  mail = new helper.Mail(from_email, subject, to_email, content);

	  var requestBody = mail.toJSON();
	  var request = sendgrid.emptyRequest();
	  request.method = 'POST';
	  request.path = '/v3/mail/send';
	  request.body = requestBody;
	  sendgrid.API(request, function (response) {
	    if (response.statusCode == 202){
	    	req.flash('success_msg', 'Recibirá un correo con las instrucciones');
	    	res.redirect('/users/login');
	    }else{
	    	req.flash('error', 'No se ha podido enviar el correo.');
	    	res.redirect('/users/forgot');
	    }
	  })*/
	  var content = "Estas recibiendo este correo porque alguien ha solicitado el reset de tu contraseña.\n\n" +
          "Por favor,accede a la siguiente dirección antes de 1 hora para cambiar tu contraseña.\n\n" +
          "http://" + req.headers.host + "/users/reset/" + token + "\n\n" +
          "Si no has sido tú, el solicitante de esta petición, no hagas caso a este email y tu contraseña se mantendrá.\n";
	  console.log(req.body.email);
	  console.log(content);
	  transporter.sendMail({
		  from: "urjc.api.emt@gmail.com",
		  to: req.body.email,
		  subject: "Recordad password",
		  text: content
	  },function(error, response){
        if(error){
            req.flash('error', error);
	    	res.redirect('/users/forgot');
        }else{
			req.flash('success_msg', 'Recibirá un correo con las instrucciones');
	    	res.redirect('/users/login');
        }
	  });
    }
  ]);
});

router.get('/reset/:token', function(req, res) {
  User.findOne({ 'local.resetPasswordToken': req.params.token, 'local.resetPasswordExpires': { $gt: Date.now() } }, function(err, user) {
    if (!user) {
      req.flash('error', 'La direccion es invalida o ha caducado.');
      return res.redirect('/users/forgot');
    }
    res.render('reset');
  });
});

router.post('/reset/:token', function(req, res) {
  async.waterfall([
    function(done) {
      User.findOne({ 'local.resetPasswordToken': req.params.token, 'local.resetPasswordExpires': { $gt: Date.now() } }, function(err, user) {
        if (!user) {
          req.flash('error', 'La direccion es invalida o ha caducado.');
          return res.redirect('/users/forgot');
        }else{
        	console.log('antes de generar la nueva contraseña');
	        bcrypt.genSalt(10, function(err, salt){
				bcrypt.hash(req.body.password, salt, function(err, hash){
					user.local.password = hash;
					user.local.resetPasswordToken = undefined;
					user.local.resetPasswordExpires = undefined;
					user.save(function(err) {
          				req.logIn(user, function(err) {
            				done(err, user);
          				});
        			});
				});
			});
		}
      });
    },
    function(user, done) {
      /*var helper = require('sendgrid').mail;
	  from_email = new helper.Email("URJC.API.EMT@gmail.com");
	  to_email = new helper.Email(user.local.email);
	  subject = "Tu password ha sido cambiada";
	  content = new helper.Content("text/plain", "Hola,\n\n" +
          "La password del usuario con email: " + user.local.email + " ha sido cambiada.\n");
	  mail = new helper.Mail(from_email, subject, to_email, content);
	  var requestBody = mail.toJSON();
	  var request = sendgrid.emptyRequest();
	  request.method = 'POST';
	  request.path = '/v3/mail/send';
	  request.body = requestBody;
	  sendgrid.API(request, function (response) {*/
	  var content = "Hola,\n\n" +
          "La password del usuario con email: " + user.local.email + " ha sido cambiada.\n";
	  transporter.sendMail({
		  from: "urjc.api.emt@gmail.com",
		  to: user.local.email,
		  subject: "Tu password ha sido cambiada",
		  text: content
	  }, function(error, response){
		console.log(response);
	    if (response.statusCode == 202){
	    	req.flash('success_msg', 'La password ha sido cambiada');
	    	res.redirect('/users/login');
	    }else{
	    	req.flash('error', 'No se ha podido enviar el correo.');
	    	res.redirect('/users/forgot');
	    }
	  })
    }
  ]);
});

router.get('/auth/facebook', passport.authenticate('facebook', { scope : 'email' }));

    // handle the callback after facebook has authenticated the user
router.get('/auth/facebook/callback',
    passport.authenticate('facebook', {
        successRedirect : '/Experimental',
        failureRedirect : '/users/login'
}));

router.get('/auth/twitter', passport.authenticate('twitter'));

    // handle the callback after twitter has authenticated the user
router.get('/auth/twitter/callback',
    passport.authenticate('twitter', {
    	successRedirect :'/Experimental',
    	failureRedirect : '/users/login'
        }));

module.exports = router;
